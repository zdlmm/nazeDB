#!/usr/bin/env python3


import nazedb
import nazetable
import os
from collections import namedtuple


def listdb():
    dbs = nazedb.NazeDB.listdb()
    if len(dbs) == 0:
        print('pas de DB')
        return
    else:
        print('liste de DB\n-----------')
        for db in dbs:
            print(db.dbname)


db = None


def showdb():
    if db is None:
        print('pas de DB choisi')
    else:
        print(db.dbinfos.dbname)


def listtable():
    if db is None:
        print('pas de DB choisi')
        return
    root = os.getcwd()
    os.chdir(os.path.join(root, db.dbinfos.dbpath))
    if os.stat('.index.db').st_size == 0:
        print('pas de table')
    else:
        print('liste des tables\n----------------')
        f = open('.index.db')
        d = f.readlines()
        f.seek(0)
        for i in d:
            names = i.split('.')
            print(names[0])
        f.close()
    os.chdir(root)


def desctable(tname: str):
    table = nazetable.NazeTable(tname, db)
    table.load()
    champs = table.get_header()
    print('liste de champ\n--------------')
    for champ in champs:
        print(champ)


def showtable(tname: str):
    table = nazetable.NazeTable(tname, db)
    table.load()
    rows = table.get_rows
    print('liste de champ\n--------------')
    for row in rows:
        print('|'.join(row))


def insert(instr: str):
    ins = instr.split('(')
    table = nazetable.NazeTable(ins[0], db)
    table.load()
    news = ins[1][:-1]
    strin = news.split(',')  #A,B,C,)
    table.add_row_list(strin)
    table.save()


def create(tname: str, header: str):
    table = nazetable.NazeTable(tname, db)
    header = header[1:-1]
    headers = header.split(',')
    table.set_header(headers)
    table.save()


def droptable(tname: str):
    table = nazetable.NazeTable(tname, db)
    table.clean()


try:
    import gnureadline as readline
except ImportError:
    import readline


class SimpleCompleter:

    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        response = None
        if state == 0:
            if text:
                self.matches = [
                    s
                    for s in self.options
                    if s and s.startswith(text)
                ]
            else:
                self.matches = self.options[:]
        try:
            response = self.matches[state]
        except IndexError:
            response = None
        return response


OPTIONS = ['createtable', 'desc', 'dropdb', 'droptable', 'insert', 'listdb',
           'listtable', 'opendb', 'showdb', 'showtable', 'stop']
readline.set_completer(SimpleCompleter(OPTIONS).complete)

readline.parse_and_bind('tab: complete')

while True:
    line = input('NazeDBCLI ("stop" to quit):')
    if line == 'stop':
        break
    if line == 'listdb':
        listdb()
    if line == 'showdb':
        showdb()
    if line == 'listtable':
        listtable()
    if line == 'dropdb':
        db = None
    words = line.split()
    if words[0] == 'opendb':
        db = nazedb.NazeDB(words[1])
    if words[0] == 'desc':
        desctable(words[1])
    if words[0] == 'showtable':
        showtable(words[1])
    if words[0] == 'insert':
        insert(words[1])
    if words[0] == 'createtable':
        create(words[1], words[2])
    if words[0] == 'droptable':
        droptable(words[1])


